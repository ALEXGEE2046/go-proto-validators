// Code generated by protoc-gen-gogo.
// source: validator.proto
// DO NOT EDIT!

/*
Package validator is a generated protocol buffer package.

It is generated from these files:
	validator.proto

It has these top-level messages:
	FieldValidator
*/
package validator

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type FieldValidator struct {
	// Uses a Golang RE2-syntax regex to match the field contents.
	Regex *string `protobuf:"bytes,1,opt,name=regex" json:"regex,omitempty"`
	// Field value of integer strict greater than this value.
	IntGt *int64 `protobuf:"varint,2,opt,name=int_gt,json=intGt" json:"int_gt,omitempty"`
	// Field value of integer strict smaller than this value.
	IntLt *int64 `protobuf:"varint,3,opt,name=int_lt,json=intLt" json:"int_lt,omitempty"`
	// Used for nested message types, requires that the message type exists.
	MsgExists *bool `protobuf:"varint,4,opt,name=msg_exists,json=msgExists" json:"msg_exists,omitempty"`
	// Human error specifies a user-customizable error that is visible to the user.
	HumanError       *string `protobuf:"bytes,5,opt,name=human_error,json=humanError" json:"human_error,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FieldValidator) Reset()                    { *m = FieldValidator{} }
func (m *FieldValidator) String() string            { return proto.CompactTextString(m) }
func (*FieldValidator) ProtoMessage()               {}
func (*FieldValidator) Descriptor() ([]byte, []int) { return fileDescriptorValidator, []int{0} }

func (m *FieldValidator) GetRegex() string {
	if m != nil && m.Regex != nil {
		return *m.Regex
	}
	return ""
}

func (m *FieldValidator) GetIntGt() int64 {
	if m != nil && m.IntGt != nil {
		return *m.IntGt
	}
	return 0
}

func (m *FieldValidator) GetIntLt() int64 {
	if m != nil && m.IntLt != nil {
		return *m.IntLt
	}
	return 0
}

func (m *FieldValidator) GetMsgExists() bool {
	if m != nil && m.MsgExists != nil {
		return *m.MsgExists
	}
	return false
}

func (m *FieldValidator) GetHumanError() string {
	if m != nil && m.HumanError != nil {
		return *m.HumanError
	}
	return ""
}

var E_Field = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*FieldValidator)(nil),
	Field:         65020,
	Name:          "validator.field",
	Tag:           "bytes,65020,opt,name=field",
}

func init() {
	proto.RegisterType((*FieldValidator)(nil), "validator.FieldValidator")
	proto.RegisterExtension(E_Field)
}

var fileDescriptorValidator = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x4b, 0xcc, 0xc9,
	0x4c, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x48,
	0x29, 0xa4, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x83, 0x25, 0x92, 0x4a, 0xd3, 0xf4, 0x53, 0x52,
	0x8b, 0x93, 0x8b, 0x32, 0x0b, 0xe0, 0x8a, 0x95, 0xa6, 0x30, 0x72, 0xf1, 0xb9, 0x65, 0xa6, 0xe6,
	0xa4, 0x84, 0xc1, 0x34, 0x09, 0x89, 0x70, 0xb1, 0x16, 0xa5, 0xa6, 0xa7, 0x56, 0x48, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0x41, 0x38, 0x42, 0xa2, 0x5c, 0x6c, 0x99, 0x79, 0x25, 0xf1, 0xe9, 0x25,
	0x12, 0x4c, 0x40, 0x61, 0xe6, 0x20, 0x56, 0x20, 0xcf, 0xbd, 0x04, 0x26, 0x9c, 0x53, 0x22, 0xc1,
	0x0c, 0x17, 0xf6, 0x29, 0x11, 0x92, 0xe5, 0xe2, 0xca, 0x2d, 0x4e, 0x8f, 0x4f, 0xad, 0xc8, 0x2c,
	0x2e, 0x29, 0x96, 0x60, 0x01, 0x4a, 0x71, 0x04, 0x71, 0x02, 0x45, 0x5c, 0xc1, 0x02, 0x42, 0xf2,
	0x5c, 0xdc, 0x19, 0xa5, 0xb9, 0x89, 0x79, 0xf1, 0xa9, 0x45, 0x45, 0xf9, 0x45, 0x12, 0xac, 0x60,
	0x8b, 0xb8, 0xc0, 0x42, 0xae, 0x20, 0x11, 0xab, 0x00, 0x2e, 0xd6, 0x34, 0x90, 0xab, 0x84, 0x64,
	0xf5, 0x20, 0x5e, 0xd0, 0x83, 0x79, 0x41, 0x0f, 0xec, 0x5a, 0xff, 0x82, 0x92, 0xcc, 0xfc, 0xbc,
	0x62, 0x89, 0x3f, 0xbf, 0x41, 0xd6, 0x72, 0x1b, 0x49, 0xea, 0x21, 0x42, 0x01, 0xd5, 0x3b, 0x41,
	0x10, 0x83, 0x9c, 0xb8, 0xa3, 0x10, 0xe1, 0x02, 0x08, 0x00, 0x00, 0xff, 0xff, 0x63, 0x19, 0xf6,
	0xdb, 0x34, 0x01, 0x00, 0x00,
}
